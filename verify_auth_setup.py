#!/usr/bin/env python3
"""
WitsV3 Authentication Verification Script
Verifies that the authentication system is working with existing configuration
"""

import sys
import asyncio
from pathlib import Path

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent))

from core.auth_manager import get_auth_manager, verify_auth
from tools.network_control_tool import NetworkControlTool
from core.personality_manager import PersonalityManager

async def main():
    """Test the authentication system with user interaction"""
    print("üîê WitsV3 Authentication Verification")
    print("=" * 50)

    auth_manager = get_auth_manager()

    # Check if token is configured
    if not auth_manager.is_token_configured():
        print("‚ùå No authentication token configured!")
        print("Please run: python setup_auth.py")
        return 1

    print("‚úÖ Authentication token is configured")

    # Get token from user for testing
    print("\nTo verify the system is working, please provide your authentication token.")
    print("(This is the token that was generated during setup)")
    auth_token = input("Enter your authentication token: ").strip()

    if not auth_token:
        print("‚ùå No token provided")
        return 1

    print("\nüß™ Testing Authentication System...")
    print("-" * 40)

    # Test 1: Basic token verification
    print("1. Testing basic token verification...")
    if auth_manager.verify_token(auth_token, "richard_elliot"):
        print("   ‚úÖ Token verification: PASS")
    else:
        print("   ‚ùå Token verification: FAIL")
        return 1

    # Test 2: Network control authorization
    print("2. Testing network control authorization...")
    is_auth, msg = verify_auth("richard_elliot", auth_token, "network_control")
    if is_auth:
        print(f"   ‚úÖ Network control auth: PASS - {msg}")
    else:
        print(f"   ‚ùå Network control auth: FAIL - {msg}")
        return 1

    # Test 3: Ethics override authorization
    print("3. Testing ethics override authorization...")
    is_auth, msg = verify_auth("richard_elliot", auth_token, "ethics_override")
    if is_auth:
        print(f"   ‚úÖ Ethics override auth: PASS - {msg}")
    else:
        print(f"   ‚ùå Ethics override auth: FAIL - {msg}")
        return 1

    # Test 4: Network control tool integration
    print("4. Testing network control tool...")
    try:
        tool = NetworkControlTool()

        # Test status (should work without auth)
        result = await tool.execute("status")
        if result["success"]:
            print("   ‚úÖ Network status check: PASS")
        else:
            print(f"   ‚ùå Network status check: FAIL - {result['message']}")

        # Test network enable with auth
        result = await tool.execute("enable_network", "richard_elliot", 5, auth_token)
        if result["success"]:
            print("   ‚úÖ Network enable with auth: PASS")

            # Test network disable
            result = await tool.execute("disable_network", "richard_elliot", 5, auth_token)
            if result["success"]:
                print("   ‚úÖ Network disable with auth: PASS")
            else:
                print(f"   ‚ùå Network disable: FAIL - {result['message']}")
        else:
            print(f"   ‚ùå Network enable with auth: FAIL - {result['message']}")

    except Exception as e:
        print(f"   ‚ùå Network control test: FAIL - {e}")
        return 1

    # Test 5: Unauthorized access prevention
    print("5. Testing unauthorized access prevention...")

    # Test with wrong user
    is_auth, msg = verify_auth("wrong_user", auth_token, "network_control")
    if not is_auth:
        print("   ‚úÖ Wrong user blocked: PASS")
    else:
        print("   ‚ùå Wrong user blocked: FAIL - unauthorized user was allowed")
        return 1

    # Test with wrong token
    is_auth, msg = verify_auth("richard_elliot", "wrong_token", "network_control")
    if not is_auth:
        print("   ‚úÖ Wrong token blocked: PASS")
    else:
        print("   ‚ùå Wrong token blocked: FAIL - wrong token was accepted")
        return 1

    print("\n" + "=" * 50)
    print("üéâ AUTHENTICATION SYSTEM VERIFICATION COMPLETE!")
    print("‚úÖ All security features are working correctly")
    print("üîê Your WitsV3 system is properly secured")

    print("\nüìù Summary of Security Features:")
    print("‚Ä¢ Token-based authentication for sensitive operations")
    print("‚Ä¢ SHA256 hashed token storage (never stored in plaintext)")
    print("‚Ä¢ User ID validation combined with token verification")
    print("‚Ä¢ Network access control with authentication")
    print("‚Ä¢ Ethics override protection with authentication")
    print("‚Ä¢ Unauthorized access prevention")

    return 0

if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        sys.exit(result)
    except KeyboardInterrupt:
        print("\n‚õî Verification cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Verification failed: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
